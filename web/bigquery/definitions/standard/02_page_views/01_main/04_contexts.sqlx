/*
   Copyright 2021 Snowplow Analytics Ltd. All rights reserved.
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

config {
  type: "operations",
  name: "04_contexts",
  disabled: sp.model_disabled,
  dependencies: ["03_scroll_depth"],
  hermetic: true,
  hasOutput: false,
  tags: ["sp_web", "sp_page_views"]
}

-- Optional contexts, only populated if enabled
js {
  function if_iab() {
    if (sp.iab === true) {
      return `
        CALL \`${sp.output_schema}.combine_context_versions\` ('contexts_com_iab_snowplow_spiders_and_robots_1');`;
    } else {
      return `
        CREATE OR REPLACE TABLE \`${sp.scratch_schema}.contexts_com_iab_snowplow_spiders_and_robots_1${sp.entropy}\`
  AS(
    SELECT
      -- SELECT NULL returns an int64 column type, cast to ensure correct type.
      CAST(NULL AS STRING) AS event_id,
      CAST(NULL AS STRING) AS page_view_id,
      CAST(NULL AS TIMESTAMP) AS collector_tstamp,
      CAST(NULL AS TIMESTAMP) AS derived_tstamp,
      CAST(NULL AS STRING) AS category,
      CAST(NULL AS STRING) AS primary_impact,
      CAST(NULL AS STRING) AS reason,
      CAST(NULL AS BOOL) AS spider_or_robot);`;
    }
  }

  function if_ua_parser() {
    if (sp.ua_parser === true) {
      return `
        CALL \`${sp.output_schema}.combine_context_versions\` ('contexts_com_snowplowanalytics_snowplow_ua_parser_context_1');`;
    } else {
      return `
        CREATE OR REPLACE TABLE \`${sp.scratch_schema}.contexts_com_snowplowanalytics_snowplow_ua_parser_context_1${sp.entropy}\`
  AS(
    SELECT
      CAST(NULL AS STRING) AS event_id,
      CAST(NULL AS STRING) AS page_view_id,
      CAST(NULL AS TIMESTAMP) AS collector_tstamp,
      CAST(NULL AS TIMESTAMP) AS derived_tstamp,
      CAST(NULL AS STRING) AS useragent_family,
      CAST(NULL AS STRING) AS useragent_major,
      CAST(NULL AS STRING) AS useragent_minor,
      CAST(NULL AS STRING) AS useragent_patch,
      CAST(NULL AS STRING) AS useragent_version,
      CAST(NULL AS STRING) AS os_family,
      CAST(NULL AS STRING) AS os_major,
      CAST(NULL AS STRING) AS os_minor,
      CAST(NULL AS STRING) AS os_patch,
      CAST(NULL AS STRING) AS os_patch_minor,
      CAST(NULL AS STRING) AS os_version,
      CAST(NULL AS STRING) AS device_family);`;
    }
  }

  function if_yauaa() {
    if (sp.yauaa === true) {
      return `
        CALL \`${sp.output_schema}.combine_context_versions\` ('contexts_nl_basjes_yauaa_context_1');`;
    } else {
      return `
        CREATE OR REPLACE TABLE \`${sp.scratch_schema}.contexts_nl_basjes_yauaa_context_1${sp.entropy}\`
  AS(
    SELECT
      CAST(NULL AS STRING) AS event_id,
      CAST(NULL AS STRING) AS page_view_id,
      CAST(NULL AS TIMESTAMP) AS collector_tstamp,
      CAST(NULL AS TIMESTAMP) AS derived_tstamp,
      CAST(NULL AS STRING) AS device_class,
      CAST(NULL AS STRING) AS agent_class,
      CAST(NULL AS STRING) AS agent_name,
      CAST(NULL AS STRING) AS agent_name_version,
      CAST(NULL AS STRING) AS agent_name_version_major,
      CAST(NULL AS STRING) AS agent_version,
      CAST(NULL AS STRING) AS agent_version_major,
      CAST(NULL AS STRING) AS device_brand,
      CAST(NULL AS STRING) AS device_name,
      CAST(NULL AS STRING) AS device_version,
      CAST(NULL AS STRING) AS layout_engine_class,
      CAST(NULL AS STRING) AS layout_engine_name,
      CAST(NULL AS STRING) AS layout_engine_name_version,
      CAST(NULL AS STRING) AS layout_engine_name_version_major,
      CAST(NULL AS STRING) AS layout_engine_version,
      CAST(NULL AS STRING) AS layout_engine_version_major,
      CAST(NULL AS STRING) AS operating_system_class,
      CAST(NULL AS STRING) AS operating_system_name,
      CAST(NULL AS STRING) AS operating_system_name_version,
      CAST(NULL AS STRING) AS operating_system_version);`;
    }
  }
}

-- iab enrichment: set iab variable to true to enable
${if_iab()}

-- ua parser enrichment: set ua_parser variable to true to enable
${if_ua_parser()}

-- yauaa enrichment: set yauaa variable to true to enable
${if_yauaa()}
